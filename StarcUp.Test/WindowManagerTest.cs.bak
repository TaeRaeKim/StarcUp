using System;
using System.Threading;
using System.Threading.Tasks;
using System.Diagnostics;
using Xunit;
using FluentAssertions;
using StarcUp.Infrastructure.Windows;

namespace StarcUp.Test
{
    public class WindowManagerTest : IDisposable
    {
        private readonly WindowManager _windowManager;
        private readonly CancellationTokenSource _cancellationTokenSource;

        public WindowManagerTest()
        {
            _windowManager = new WindowManager();
            _cancellationTokenSource = new CancellationTokenSource();
        }

        [Fact]
        public void SetupWindowEventHook_WithValidProcess_ShouldReturnTrue()
        {
            // Arrange
            var currentProcess = Process.GetCurrentProcess();
            var windowHandle = currentProcess.MainWindowHandle;

            // Act
            var result = _windowManager.SetupWindowEventHook(windowHandle, (uint)currentProcess.Id);

            // Assert
            result.Should().BeTrue();
        }

        [Fact]
        public void SetupForegroundEventHook_ShouldReturnTrue()
        {
            // Act
            var result = _windowManager.SetupForegroundEventHook();

            // Assert
            result.Should().BeTrue();
        }

        [Fact]
        public void WindowPositionChanged_ShouldTriggerEvent()
        {
            // Arrange
            bool eventTriggered = false;
            nint triggeredWindowHandle = 0;

            _windowManager.WindowPositionChanged += (handle) =>
            {
                eventTriggered = true;
                triggeredWindowHandle = handle;
            };

            var currentProcess = Process.GetCurrentProcess();
            var windowHandle = currentProcess.MainWindowHandle;

            // WindowHandle이 유효하지 않으면 테스트 스킵
            if (windowHandle == 0)
            {
                Assert.True(true, "테스트를 위한 윈도우 핸들이 없습니다.");
                return;
            }

            // Act
            var result = _windowManager.SetupWindowEventHook(windowHandle, (uint)currentProcess.Id);

            // Assert
            result.Should().BeTrue();

            // 이벤트 트리거를 위해 잠시 대기
            Thread.Sleep(100);
        }

        [Fact]
        public void GetWindowInfo_WithValidHandle_ShouldReturnWindowInfo()
        {
            // Arrange
            var currentProcess = Process.GetCurrentProcess();
            var windowHandle = currentProcess.MainWindowHandle;

            // WindowHandle이 유효하지 않으면 테스트 스킵
            if (windowHandle == 0)
            {
                Assert.True(true, "테스트를 위한 윈도우 핸들이 없습니다.");
                return;
            }

            // Act
            var windowInfo = _windowManager.GetWindowInfo(windowHandle);

            // Assert
            windowInfo.Should().NotBeNull();
            windowInfo.Handle.Should().Be(windowHandle);
        }

        [Fact]
        public void IsWindowMinimized_WithValidHandle_ShouldReturnBoolean()
        {
            // Arrange
            var currentProcess = Process.GetCurrentProcess();
            var windowHandle = currentProcess.MainWindowHandle;

            // WindowHandle이 유효하지 않으면 테스트 스킵
            if (windowHandle == 0)
            {
                Assert.True(true, "테스트를 위한 윈도우 핸들이 없습니다.");
                return;
            }

            // Act
            var isMinimized = _windowManager.IsWindowMinimized(windowHandle);

            // Assert
            isMinimized.Should().BeFalse(); // 테스트 실행 중에는 최소화되지 않음
        }

        [Fact]
        public void GetForegroundWindow_ShouldReturnValidHandle()
        {
            // Act
            var foregroundWindow = _windowManager.GetForegroundWindow();

            // Assert
            foregroundWindow.Should().NotBe(0);
        }

        [Fact]
        public async Task WindowEventHook_IntegrationTest()
        {
            // Arrange
            var eventReceived = new TaskCompletionSource<bool>();
            bool positionEventReceived = false;

            _windowManager.WindowPositionChanged += (handle) =>
            {
                Console.WriteLine($"윈도우 위치 변경 이벤트 수신: 0x{handle:X8}");
                positionEventReceived = true;
                eventReceived.TrySetResult(true);
            };

            // 포어그라운드 이벤트 후킹 설정
            var foregroundHookResult = _windowManager.SetupForegroundEventHook();
            foregroundHookResult.Should().BeTrue();

            // Act & Assert
            Console.WriteLine("윈도우 이벤트 테스트 시작 - 5초간 대기");
            Console.WriteLine("이 시간 동안 다른 윈도우를 클릭하거나 이동해보세요.");

            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            
            try
            {
                await eventReceived.Task.WaitAsync(cts.Token);
                Console.WriteLine("이벤트가 성공적으로 수신되었습니다!");
            }
            catch (TimeoutException)
            {
                Console.WriteLine("5초 동안 이벤트가 수신되지 않았습니다. 수동으로 윈도우를 조작해보세요.");
            }

            // 최소한 후킹이 설정되었는지 확인
            foregroundHookResult.Should().BeTrue();
        }

        public void Dispose()
        {
            _windowManager?.Dispose();
            _cancellationTokenSource?.Dispose();
        }
    }
}